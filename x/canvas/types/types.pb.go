// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/canvas/types/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCanvas struct {
	Id               string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Width            uint64                                        `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height           uint64                                        `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	RefundDuration   time.Duration                                 `protobuf:"bytes,4,opt,name=refund_duration,json=refundDuration,proto3,stdduration" json:"refund_duration" yaml:"refund_duration"`
	AllowDenomPrefix string                                        `protobuf:"bytes,5,opt,name=allowDenomPrefix,proto3" json:"allowDenomPrefix,omitempty"`
	PriceForPoint    uint64                                        `protobuf:"varint,6,opt,name=priceForPoint,proto3" json:"priceForPoint,omitempty"`
	Sender           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgCreateCanvas) Reset()         { *m = MsgCreateCanvas{} }
func (m *MsgCreateCanvas) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCanvas) ProtoMessage()    {}
func (*MsgCreateCanvas) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d27995aa980ef9, []int{0}
}
func (m *MsgCreateCanvas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCanvas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCanvas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCanvas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCanvas.Merge(m, src)
}
func (m *MsgCreateCanvas) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCanvas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCanvas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCanvas proto.InternalMessageInfo

func (m *MsgCreateCanvas) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgCreateCanvas) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *MsgCreateCanvas) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgCreateCanvas) GetRefundDuration() time.Duration {
	if m != nil {
		return m.RefundDuration
	}
	return 0
}

func (m *MsgCreateCanvas) GetAllowDenomPrefix() string {
	if m != nil {
		return m.AllowDenomPrefix
	}
	return ""
}

func (m *MsgCreateCanvas) GetPriceForPoint() uint64 {
	if m != nil {
		return m.PriceForPoint
	}
	return 0
}

func (m *MsgCreateCanvas) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MsgPaint struct {
	Id     string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	X      uint64                                        `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      uint64                                        `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Amount types.Coin                                    `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgPaint) Reset()         { *m = MsgPaint{} }
func (m *MsgPaint) String() string { return proto.CompactTextString(m) }
func (*MsgPaint) ProtoMessage()    {}
func (*MsgPaint) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d27995aa980ef9, []int{1}
}
func (m *MsgPaint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPaint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPaint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPaint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPaint.Merge(m, src)
}
func (m *MsgPaint) XXX_Size() int {
	return m.Size()
}
func (m *MsgPaint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPaint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPaint proto.InternalMessageInfo

func (m *MsgPaint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgPaint) GetX() uint64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MsgPaint) GetY() uint64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MsgPaint) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgPaint) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Canvas struct {
	Id               string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Width            uint64        `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height           uint64        `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	RefundDuration   time.Duration `protobuf:"bytes,4,opt,name=refund_duration,json=refundDuration,proto3,stdduration" json:"refund_duration" yaml:"refund_duration"`
	AllowDenomPrefix string        `protobuf:"bytes,5,opt,name=allowDenomPrefix,proto3" json:"allowDenomPrefix,omitempty"`
	PriceForPoint    uint64        `protobuf:"varint,6,opt,name=priceForPoint,proto3" json:"priceForPoint,omitempty"`
}

func (m *Canvas) Reset()         { *m = Canvas{} }
func (m *Canvas) String() string { return proto.CompactTextString(m) }
func (*Canvas) ProtoMessage()    {}
func (*Canvas) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d27995aa980ef9, []int{2}
}
func (m *Canvas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Canvas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Canvas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Canvas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Canvas.Merge(m, src)
}
func (m *Canvas) XXX_Size() int {
	return m.Size()
}
func (m *Canvas) XXX_DiscardUnknown() {
	xxx_messageInfo_Canvas.DiscardUnknown(m)
}

var xxx_messageInfo_Canvas proto.InternalMessageInfo

func (m *Canvas) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Canvas) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Canvas) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Canvas) GetRefundDuration() time.Duration {
	if m != nil {
		return m.RefundDuration
	}
	return 0
}

func (m *Canvas) GetAllowDenomPrefix() string {
	if m != nil {
		return m.AllowDenomPrefix
	}
	return ""
}

func (m *Canvas) GetPriceForPoint() uint64 {
	if m != nil {
		return m.PriceForPoint
	}
	return 0
}

type Point struct {
	X     uint64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y     uint64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d27995aa980ef9, []int{3}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() uint64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() uint64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Point) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type RefundData struct {
	Recipient  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=recipient,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"recipient,omitempty" yaml:"sender"`
	Amount     types.Coin                                    `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	RefundTime *timestamp.Timestamp                          `protobuf:"bytes,3,opt,name=refundTime,proto3" json:"refundTime,omitempty"`
}

func (m *RefundData) Reset()         { *m = RefundData{} }
func (m *RefundData) String() string { return proto.CompactTextString(m) }
func (*RefundData) ProtoMessage()    {}
func (*RefundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d27995aa980ef9, []int{4}
}
func (m *RefundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefundData.Merge(m, src)
}
func (m *RefundData) XXX_Size() int {
	return m.Size()
}
func (m *RefundData) XXX_DiscardUnknown() {
	xxx_messageInfo_RefundData.DiscardUnknown(m)
}

var xxx_messageInfo_RefundData proto.InternalMessageInfo

func (m *RefundData) GetRecipient() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *RefundData) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *RefundData) GetRefundTime() *timestamp.Timestamp {
	if m != nil {
		return m.RefundTime
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateCanvas)(nil), "astro_canvas.x.canvas.v1.MsgCreateCanvas")
	proto.RegisterType((*MsgPaint)(nil), "astro_canvas.x.canvas.v1.MsgPaint")
	proto.RegisterType((*Canvas)(nil), "astro_canvas.x.canvas.v1.Canvas")
	proto.RegisterType((*Point)(nil), "astro_canvas.x.canvas.v1.Point")
	proto.RegisterType((*RefundData)(nil), "astro_canvas.x.canvas.v1.RefundData")
}

func init() { proto.RegisterFile("x/canvas/types/types.proto", fileDescriptor_18d27995aa980ef9) }

var fileDescriptor_18d27995aa980ef9 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x54, 0xbd, 0x6e, 0xdb, 0x30,
	0x10, 0x36, 0xd5, 0x58, 0xad, 0x99, 0xbf, 0x56, 0x0d, 0x02, 0xd5, 0x83, 0x64, 0x08, 0x45, 0x61,
	0x14, 0xb0, 0x04, 0xa7, 0x53, 0xb3, 0xc5, 0x0e, 0xba, 0x14, 0x01, 0x0c, 0x21, 0x53, 0x16, 0x97,
	0x96, 0x68, 0x89, 0x88, 0x25, 0x0a, 0x24, 0xed, 0xd8, 0x5b, 0x1f, 0xa1, 0x63, 0x5f, 0xa8, 0x40,
	0xc6, 0x8c, 0x5d, 0xea, 0x16, 0x36, 0xfa, 0x02, 0x19, 0x3b, 0x15, 0x26, 0x69, 0xc4, 0x3f, 0x4b,
	0x87, 0x6c, 0x5d, 0x24, 0xde, 0xf1, 0xe3, 0xdd, 0x77, 0xdf, 0x1d, 0x0e, 0x56, 0xc7, 0x41, 0x84,
	0xf2, 0x11, 0xe2, 0x81, 0x98, 0x14, 0x58, 0x7f, 0xfd, 0x82, 0x51, 0x41, 0x2d, 0x1b, 0x71, 0xc1,
	0x68, 0x57, 0xdd, 0xfb, 0x63, 0x5f, 0x1f, 0x46, 0xcd, 0xea, 0x1b, 0x91, 0x12, 0x16, 0x77, 0x0b,
	0xc4, 0xc4, 0x24, 0x90, 0xe0, 0x20, 0xa1, 0x09, 0x7d, 0x38, 0xa9, 0x08, 0x55, 0x27, 0xa1, 0x34,
	0x19, 0x60, 0x05, 0xe9, 0x0d, 0xfb, 0x41, 0x3c, 0x64, 0x48, 0x10, 0x9a, 0xeb, 0x7b, 0x77, 0xf3,
	0x5e, 0x90, 0x0c, 0x73, 0x81, 0xb2, 0x42, 0x03, 0x5e, 0x6c, 0xb1, 0xf2, 0x7e, 0x1b, 0xf0, 0xf0,
	0x82, 0x27, 0x6d, 0x86, 0x91, 0xc0, 0x6d, 0x49, 0xc9, 0x3a, 0x80, 0x06, 0x89, 0x6d, 0x50, 0x03,
	0xf5, 0x4a, 0x68, 0x90, 0xd8, 0x3a, 0x82, 0xe5, 0x1b, 0x12, 0x8b, 0xd4, 0x36, 0x6a, 0xa0, 0xbe,
	0x13, 0x2a, 0xc3, 0x3a, 0x86, 0x66, 0x8a, 0x49, 0x92, 0x0a, 0xfb, 0x89, 0x74, 0x6b, 0xcb, 0xea,
	0xc3, 0x43, 0x86, 0xfb, 0xc3, 0x3c, 0xee, 0x2e, 0xe9, 0xd9, 0x3b, 0x35, 0x50, 0xdf, 0x3d, 0x79,
	0xe5, 0x2b, 0x7e, 0xfe, 0x92, 0x9f, 0x7f, 0xae, 0x01, 0x2d, 0xef, 0x76, 0xea, 0x96, 0xee, 0xa7,
	0xee, 0xf1, 0x04, 0x65, 0x83, 0x53, 0x6f, 0xe3, 0xbd, 0xf7, 0xf5, 0xa7, 0x0b, 0xc2, 0x03, 0xe5,
	0x5d, 0xbe, 0xb1, 0xde, 0xc2, 0xe7, 0x68, 0x30, 0xa0, 0x37, 0xe7, 0x38, 0xa7, 0x59, 0x87, 0xe1,
	0x3e, 0x19, 0xdb, 0x65, 0xc9, 0x79, 0xcb, 0x6f, 0xbd, 0x86, 0xfb, 0x05, 0x23, 0x11, 0xfe, 0x40,
	0x59, 0x87, 0x92, 0x5c, 0xd8, 0xa6, 0xa4, 0xbc, 0xee, 0xb4, 0xae, 0xa0, 0xc9, 0x71, 0x1e, 0x63,
	0x66, 0x3f, 0xad, 0x81, 0xfa, 0x5e, 0xab, 0x75, 0x3f, 0x75, 0xf7, 0x15, 0x23, 0xe5, 0xf7, 0xfe,
	0x4c, 0xdd, 0x46, 0x42, 0x44, 0x3a, 0xec, 0xf9, 0x11, 0xcd, 0x82, 0x88, 0xf2, 0x8c, 0x72, 0xfd,
	0x6b, 0xf0, 0xf8, 0x5a, 0x4b, 0x7b, 0x16, 0x45, 0x67, 0x71, 0xcc, 0x30, 0xe7, 0xa1, 0x8e, 0xe8,
	0x7d, 0x03, 0xf0, 0xd9, 0x05, 0x4f, 0x3a, 0x68, 0x91, 0x68, 0x53, 0xe0, 0x3d, 0x08, 0xc6, 0x5a,
	0x5c, 0x30, 0x5e, 0x58, 0x13, 0xad, 0x29, 0x98, 0x58, 0x4d, 0x68, 0xa2, 0x8c, 0x0e, 0x73, 0xa1,
	0x55, 0x7c, 0xe9, 0xab, 0x74, 0x5d, 0x1e, 0x5f, 0xfb, 0xa3, 0xa6, 0xdf, 0xa6, 0x24, 0x6f, 0xed,
	0x2c, 0xf4, 0x0b, 0x35, 0x70, 0xa5, 0x8e, 0xf2, 0xa3, 0xd7, 0xf1, 0xd9, 0x80, 0xe6, 0xff, 0x3d,
	0x26, 0xde, 0x7b, 0x58, 0x56, 0xf3, 0x22, 0xdb, 0x06, 0xd6, 0xda, 0x66, 0x2c, 0xdb, 0x76, 0x04,
	0xcb, 0x11, 0x1d, 0x50, 0x26, 0xab, 0xae, 0x84, 0xca, 0xf0, 0x7e, 0x00, 0x08, 0x43, 0xc5, 0x0f,
	0x09, 0x64, 0x7d, 0x82, 0x15, 0x86, 0x23, 0x52, 0x10, 0x9c, 0x0b, 0x19, 0xe8, 0x71, 0x7a, 0xf5,
	0x10, 0x74, 0x65, 0x7a, 0x8c, 0x7f, 0x9d, 0x9e, 0x53, 0x08, 0x95, 0x84, 0x97, 0x24, 0xc3, 0x92,
	0xfe, 0xee, 0x49, 0x75, 0xab, 0x27, 0x97, 0xcb, 0xd5, 0x12, 0xae, 0xa0, 0x5b, 0x1f, 0x6f, 0x67,
	0x0e, 0xb8, 0x9b, 0x39, 0xe0, 0xd7, 0xcc, 0x01, 0x5f, 0xe6, 0x4e, 0xe9, 0x6e, 0xee, 0x94, 0xbe,
	0xcf, 0x9d, 0xd2, 0x55, 0x73, 0xb5, 0x84, 0x14, 0x91, 0x1c, 0x15, 0x9c, 0xf0, 0x40, 0xee, 0xc4,
	0x86, 0xde, 0x99, 0xeb, 0xcb, 0xb3, 0x67, 0xca, 0x64, 0xef, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x45, 0xff, 0x09, 0x48, 0x55, 0x05, 0x00, 0x00,
}

func (m *MsgCreateCanvas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCanvas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCanvas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PriceForPoint != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PriceForPoint))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AllowDenomPrefix) > 0 {
		i -= len(m.AllowDenomPrefix)
		copy(dAtA[i:], m.AllowDenomPrefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowDenomPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RefundDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RefundDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPaint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPaint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPaint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Y != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x18
	}
	if m.X != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Canvas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Canvas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Canvas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceForPoint != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PriceForPoint))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AllowDenomPrefix) > 0 {
		i -= len(m.AllowDenomPrefix)
		copy(dAtA[i:], m.AllowDenomPrefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowDenomPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RefundDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RefundDuration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Y != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefundTime != nil {
		{
			size, err := m.RefundTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCanvas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovTypes(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RefundDuration)
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.AllowDenomPrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PriceForPoint != 0 {
		n += 1 + sovTypes(uint64(m.PriceForPoint))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgPaint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovTypes(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTypes(uint64(m.Y))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Canvas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovTypes(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RefundDuration)
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.AllowDenomPrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PriceForPoint != 0 {
		n += 1 + sovTypes(uint64(m.PriceForPoint))
	}
	return n
}

func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTypes(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTypes(uint64(m.Y))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RefundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.RefundTime != nil {
		l = m.RefundTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCanvas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCanvas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCanvas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RefundDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDenomPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowDenomPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceForPoint", wireType)
			}
			m.PriceForPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceForPoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPaint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPaint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPaint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Canvas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Canvas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Canvas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RefundDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDenomPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowDenomPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceForPoint", wireType)
			}
			m.PriceForPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceForPoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefundTime == nil {
				m.RefundTime = &timestamp.Timestamp{}
			}
			if err := m.RefundTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
