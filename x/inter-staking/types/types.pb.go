// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/inter-staking/types/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegister struct {
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string                                        `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgRegister) Reset()         { *m = MsgRegister{} }
func (m *MsgRegister) String() string { return proto.CompactTextString(m) }
func (*MsgRegister) ProtoMessage()    {}
func (*MsgRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_80475427a5706515, []int{0}
}
func (m *MsgRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegister.Merge(m, src)
}
func (m *MsgRegister) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegister.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegister proto.InternalMessageInfo

func (m *MsgRegister) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *MsgRegister) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgRegister) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MsgDelegate struct {
	// the port on which the packet will be sent
	TransferSourcePort string `protobuf:"bytes,1,opt,name=transfer_source_port,json=transferSourcePort,proto3" json:"transfer_source_port,omitempty" yaml:"transfer_source_port"`
	// the channel by which the packet will be sent
	TransferSourceChannel          string                                        `protobuf:"bytes,2,opt,name=transfer_source_channel,json=transferSourceChannel,proto3" json:"transfer_source_channel,omitempty" yaml:"transfer_source_channel"`
	InterchainAccountSourcePort    string                                        `protobuf:"bytes,3,opt,name=interchain_account_source_port,json=interchainAccountSourcePort,proto3" json:"interchain_account_source_port,omitempty" yaml:"interchain_account_source_port"`
	InterchainAccountSourceChannel string                                        `protobuf:"bytes,4,opt,name=interchain_account_source_channel,json=interchainAccountSourceChannel,proto3" json:"interchain_account_source_channel,omitempty" yaml:"interchain_account_source_channel"`
	CounterpartyBech32Addr         string                                        `protobuf:"bytes,5,opt,name=counterparty_bech32_addr,json=counterpartyBech32Addr,proto3" json:"counterparty_bech32_addr,omitempty" yaml:"counterparty_bech32_addr"`
	DelegatorAddress               github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=delegator_address,json=delegatorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress               github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,7,opt,name=validator_address,json=validatorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validator_address,omitempty" yaml:"validator_address"`
	Amount                         types.Coin                                    `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDelegate) Reset()         { *m = MsgDelegate{} }
func (m *MsgDelegate) String() string { return proto.CompactTextString(m) }
func (*MsgDelegate) ProtoMessage()    {}
func (*MsgDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_80475427a5706515, []int{1}
}
func (m *MsgDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegate.Merge(m, src)
}
func (m *MsgDelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegate proto.InternalMessageInfo

func (m *MsgDelegate) GetTransferSourcePort() string {
	if m != nil {
		return m.TransferSourcePort
	}
	return ""
}

func (m *MsgDelegate) GetTransferSourceChannel() string {
	if m != nil {
		return m.TransferSourceChannel
	}
	return ""
}

func (m *MsgDelegate) GetInterchainAccountSourcePort() string {
	if m != nil {
		return m.InterchainAccountSourcePort
	}
	return ""
}

func (m *MsgDelegate) GetInterchainAccountSourceChannel() string {
	if m != nil {
		return m.InterchainAccountSourceChannel
	}
	return ""
}

func (m *MsgDelegate) GetCounterpartyBech32Addr() string {
	if m != nil {
		return m.CounterpartyBech32Addr
	}
	return ""
}

func (m *MsgDelegate) GetDelegatorAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.DelegatorAddress
	}
	return nil
}

func (m *MsgDelegate) GetValidatorAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *MsgDelegate) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgRegister)(nil), "astro_canvas.x.interstaking.v1.MsgRegister")
	proto.RegisterType((*MsgDelegate)(nil), "astro_canvas.x.interstaking.v1.MsgDelegate")
}

func init() { proto.RegisterFile("x/inter-staking/types/types.proto", fileDescriptor_80475427a5706515) }

var fileDescriptor_80475427a5706515 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x69, 0x09, 0xb0, 0x01, 0x44, 0x0d, 0x2d, 0xa6, 0x95, 0xbc, 0xa9, 0x11, 0x28, 0x48,
	0xc4, 0x56, 0xda, 0x03, 0xa8, 0x27, 0x92, 0x72, 0xe1, 0x50, 0x09, 0x8c, 0xc4, 0xa1, 0x12, 0xb2,
	0x36, 0xeb, 0xc5, 0xb1, 0x92, 0xec, 0x46, 0xbb, 0x9b, 0xd0, 0xf0, 0x14, 0x3c, 0x02, 0x2f, 0xc1,
	0x3b, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x0b, 0x25, 0x17, 0xce, 0x3e, 0x72, 0x42, 0xd9, 0x75, 0x7e,
	0xdc, 0x24, 0xfc, 0x5c, 0x12, 0xef, 0xcc, 0x37, 0xdf, 0xb7, 0xdf, 0xec, 0x68, 0xc0, 0xfe, 0x99,
	0x17, 0x53, 0x49, 0x78, 0x55, 0x48, 0xd4, 0x8e, 0x69, 0xe4, 0xc9, 0x61, 0x8f, 0x08, 0xfd, 0xeb,
	0xf6, 0x38, 0x93, 0xcc, 0xb4, 0x91, 0x90, 0x9c, 0x05, 0x18, 0xd1, 0x01, 0x12, 0xee, 0x99, 0xab,
	0xf0, 0x19, 0xdc, 0x1d, 0xd4, 0x76, 0x1f, 0xcb, 0x56, 0xcc, 0xc3, 0xa0, 0x87, 0xb8, 0x1c, 0x7a,
	0xaa, 0xc4, 0x8b, 0x58, 0xc4, 0xe6, 0x5f, 0x9a, 0x67, 0x77, 0x6b, 0x89, 0xda, 0xf9, 0x66, 0x80,
	0xd2, 0x89, 0x88, 0x7c, 0x12, 0xc5, 0x42, 0x12, 0x6e, 0x3e, 0x03, 0x25, 0xc1, 0xfa, 0x1c, 0x93,
	0xa0, 0xc7, 0xb8, 0xb4, 0x8c, 0xb2, 0x51, 0xb9, 0xd1, 0xd8, 0x49, 0x13, 0x68, 0x0e, 0x51, 0xb7,
	0x73, 0xe4, 0x2c, 0x24, 0x1d, 0x1f, 0xe8, 0xd3, 0x6b, 0xc6, 0xa5, 0xf9, 0x02, 0xdc, 0xce, 0x72,
	0xb8, 0x85, 0x28, 0x25, 0x1d, 0xeb, 0x8a, 0xaa, 0x7d, 0x90, 0x26, 0x70, 0x3b, 0x57, 0x9b, 0xe5,
	0x1d, 0xff, 0x96, 0x0e, 0x1c, 0xeb, 0xb3, 0xf9, 0x0a, 0x14, 0x05, 0xa1, 0x21, 0xe1, 0xd6, 0x46,
	0xd9, 0xa8, 0xdc, 0x6c, 0xd4, 0x7e, 0x25, 0xb0, 0x1a, 0xc5, 0xb2, 0xd5, 0x6f, 0xba, 0x98, 0x75,
	0x3d, 0xcc, 0x44, 0x97, 0x89, 0xec, 0xaf, 0x2a, 0xc2, 0x76, 0x66, 0xa4, 0x8e, 0x71, 0x3d, 0x0c,
	0x39, 0x11, 0xc2, 0xcf, 0x08, 0x9c, 0xaf, 0x45, 0xe5, 0xea, 0x25, 0xe9, 0x90, 0x08, 0x49, 0x62,
	0xbe, 0x01, 0xf7, 0x24, 0x47, 0x54, 0x7c, 0x20, 0x3c, 0x58, 0xb6, 0x07, 0xd3, 0x04, 0xee, 0xe9,
	0x2b, 0xae, 0x42, 0x39, 0xbe, 0x39, 0x0d, 0xbf, 0x9d, 0xfb, 0x3d, 0x05, 0xf7, 0x2f, 0x83, 0xf3,
	0xc6, 0x9d, 0x34, 0x81, 0xf6, 0x6a, 0xd6, 0x59, 0x07, 0xb6, 0xf3, 0xc4, 0xd3, 0x4e, 0x50, 0x60,
	0xab, 0x27, 0xc6, 0x2d, 0x14, 0xd3, 0x00, 0x61, 0xcc, 0xfa, 0x54, 0xe6, 0x2e, 0xbe, 0xa1, 0x24,
	0x9e, 0xa4, 0x09, 0x7c, 0xa4, 0x25, 0xfe, 0x8c, 0x77, 0xfc, 0xbd, 0x39, 0xa0, 0xae, 0xf3, 0x0b,
	0x5e, 0x3e, 0x82, 0xfd, 0xf5, 0xf5, 0x53, 0x57, 0x9b, 0x4a, 0xf2, 0x69, 0x9a, 0xc0, 0xca, 0xdf,
	0x24, 0x67, 0xfe, 0xec, 0x35, 0xaa, 0x53, 0xa3, 0xef, 0x81, 0xa5, 0xa2, 0x84, 0xab, 0xd9, 0x0d,
	0x9a, 0x04, 0xb7, 0x0e, 0x0f, 0x02, 0x14, 0x86, 0xdc, 0xba, 0xaa, 0xf4, 0x1e, 0xa6, 0x09, 0x84,
	0x5a, 0x6f, 0x1d, 0xd2, 0xf1, 0x77, 0x16, 0x53, 0x0d, 0x95, 0x99, 0x4c, 0x84, 0xf9, 0x09, 0x6c,
	0x85, 0x7a, 0x04, 0x18, 0x57, 0x50, 0x22, 0x84, 0x55, 0x54, 0xc3, 0x75, 0x92, 0x26, 0xd0, 0xd2,
	0xbc, 0x4b, 0x10, 0xe7, 0xff, 0x07, 0xef, 0xce, 0x8c, 0x24, 0x8b, 0x4c, 0xb4, 0x07, 0xa8, 0x13,
	0x87, 0x39, 0xed, 0x6b, 0x97, 0xb5, 0x97, 0x20, 0xff, 0xaa, 0xfd, 0x0e, 0x75, 0x66, 0xda, 0x33,
	0x92, 0xa9, 0x76, 0x0d, 0x14, 0x51, 0x77, 0xd2, 0x12, 0xeb, 0x7a, 0xd9, 0xa8, 0x94, 0x0e, 0xee,
	0xba, 0xba, 0x3e, 0x10, 0x61, 0xdb, 0x1d, 0xd4, 0xdc, 0x63, 0x16, 0xd3, 0xc6, 0xe6, 0x79, 0x02,
	0x0b, 0x7e, 0x06, 0x3c, 0xda, 0xfc, 0xf9, 0x05, 0x1a, 0x0d, 0xff, 0x7c, 0x64, 0x1b, 0x17, 0x23,
	0xdb, 0xf8, 0x31, 0xb2, 0x8d, 0xcf, 0x63, 0xbb, 0x70, 0x31, 0xb6, 0x0b, 0xdf, 0xc7, 0x76, 0xe1,
	0xf4, 0xf9, 0xe2, 0x9d, 0x26, 0xef, 0x89, 0x7a, 0x22, 0x16, 0x9e, 0x5a, 0x4c, 0x55, 0xbd, 0x98,
	0xbc, 0x95, 0x8b, 0xac, 0x59, 0x54, 0x8b, 0xe6, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xfa, 0xb5, 0x91, 0xe8, 0x04, 0x00, 0x00,
}

func (this *MsgDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDelegate)
	if !ok {
		that2, ok := that.(MsgDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransferSourcePort != that1.TransferSourcePort {
		return false
	}
	if this.TransferSourceChannel != that1.TransferSourceChannel {
		return false
	}
	if this.InterchainAccountSourcePort != that1.InterchainAccountSourcePort {
		return false
	}
	if this.InterchainAccountSourceChannel != that1.InterchainAccountSourceChannel {
		return false
	}
	if this.CounterpartyBech32Addr != that1.CounterpartyBech32Addr {
		return false
	}
	if !bytes.Equal(this.DelegatorAddress, that1.DelegatorAddress) {
		return false
	}
	if !bytes.Equal(this.ValidatorAddress, that1.ValidatorAddress) {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	return true
}
func (m *MsgRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CounterpartyBech32Addr) > 0 {
		i -= len(m.CounterpartyBech32Addr)
		copy(dAtA[i:], m.CounterpartyBech32Addr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CounterpartyBech32Addr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InterchainAccountSourceChannel) > 0 {
		i -= len(m.InterchainAccountSourceChannel)
		copy(dAtA[i:], m.InterchainAccountSourceChannel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InterchainAccountSourceChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InterchainAccountSourcePort) > 0 {
		i -= len(m.InterchainAccountSourcePort)
		copy(dAtA[i:], m.InterchainAccountSourcePort)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InterchainAccountSourcePort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TransferSourceChannel) > 0 {
		i -= len(m.TransferSourceChannel)
		copy(dAtA[i:], m.TransferSourceChannel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TransferSourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransferSourcePort) > 0 {
		i -= len(m.TransferSourcePort)
		copy(dAtA[i:], m.TransferSourcePort)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TransferSourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferSourcePort)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TransferSourceChannel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InterchainAccountSourcePort)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InterchainAccountSourceChannel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CounterpartyBech32Addr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferSourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferSourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountSourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountSourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountSourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountSourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyBech32Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyBech32Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = append(m.DelegatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorAddress == nil {
				m.DelegatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
