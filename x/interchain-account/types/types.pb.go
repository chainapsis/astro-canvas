// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/interchain-account/types/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterIBCAccountPacketData struct {
	Salt string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *RegisterIBCAccountPacketData) Reset()         { *m = RegisterIBCAccountPacketData{} }
func (m *RegisterIBCAccountPacketData) String() string { return proto.CompactTextString(m) }
func (*RegisterIBCAccountPacketData) ProtoMessage()    {}
func (*RegisterIBCAccountPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_81493755dc95b73d, []int{0}
}
func (m *RegisterIBCAccountPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterIBCAccountPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterIBCAccountPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterIBCAccountPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterIBCAccountPacketData.Merge(m, src)
}
func (m *RegisterIBCAccountPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RegisterIBCAccountPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterIBCAccountPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterIBCAccountPacketData proto.InternalMessageInfo

func (m *RegisterIBCAccountPacketData) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

type RunTxPacketData struct {
	TxBytes []byte `protobuf:"bytes,1,opt,name=txBytes,proto3" json:"txBytes,omitempty"`
}

func (m *RunTxPacketData) Reset()         { *m = RunTxPacketData{} }
func (m *RunTxPacketData) String() string { return proto.CompactTextString(m) }
func (*RunTxPacketData) ProtoMessage()    {}
func (*RunTxPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_81493755dc95b73d, []int{1}
}
func (m *RunTxPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTxPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTxPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTxPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTxPacketData.Merge(m, src)
}
func (m *RunTxPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RunTxPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTxPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RunTxPacketData proto.InternalMessageInfo

func (m *RunTxPacketData) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

type RegisterIBCAccountPacketAcknowledgement struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *RegisterIBCAccountPacketAcknowledgement) Reset() {
	*m = RegisterIBCAccountPacketAcknowledgement{}
}
func (m *RegisterIBCAccountPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*RegisterIBCAccountPacketAcknowledgement) ProtoMessage()    {}
func (*RegisterIBCAccountPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_81493755dc95b73d, []int{2}
}
func (m *RegisterIBCAccountPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterIBCAccountPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterIBCAccountPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterIBCAccountPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterIBCAccountPacketAcknowledgement.Merge(m, src)
}
func (m *RegisterIBCAccountPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *RegisterIBCAccountPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterIBCAccountPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterIBCAccountPacketAcknowledgement proto.InternalMessageInfo

func (m *RegisterIBCAccountPacketAcknowledgement) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RunTxPacketAcknowledgement struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RunTxPacketAcknowledgement) Reset()         { *m = RunTxPacketAcknowledgement{} }
func (m *RunTxPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*RunTxPacketAcknowledgement) ProtoMessage()    {}
func (*RunTxPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_81493755dc95b73d, []int{3}
}
func (m *RunTxPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTxPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTxPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTxPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTxPacketAcknowledgement.Merge(m, src)
}
func (m *RunTxPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *RunTxPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTxPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_RunTxPacketAcknowledgement proto.InternalMessageInfo

func (m *RunTxPacketAcknowledgement) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterIBCAccountPacketData)(nil), "astro_canvas.x.interchain_account.v1.RegisterIBCAccountPacketData")
	proto.RegisterType((*RunTxPacketData)(nil), "astro_canvas.x.interchain_account.v1.RunTxPacketData")
	proto.RegisterType((*RegisterIBCAccountPacketAcknowledgement)(nil), "astro_canvas.x.interchain_account.v1.RegisterIBCAccountPacketAcknowledgement")
	proto.RegisterType((*RunTxPacketAcknowledgement)(nil), "astro_canvas.x.interchain_account.v1.RunTxPacketAcknowledgement")
}

func init() {
	proto.RegisterFile("x/interchain-account/types/types.proto", fileDescriptor_81493755dc95b73d)
}

var fileDescriptor_81493755dc95b73d = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x13, 0x28, 0x7e, 0x2c, 0x8a, 0x90, 0x53, 0x11, 0x59, 0x24, 0x88, 0x0a, 0xd2, 0xc4,
	0x8f, 0xb3, 0x87, 0xa6, 0x5e, 0xbc, 0xc9, 0x22, 0x08, 0x5e, 0xca, 0x76, 0x3a, 0xa4, 0xa1, 0xed,
	0x6e, 0xc8, 0x4c, 0x6a, 0xfa, 0x2f, 0xfc, 0x59, 0x1e, 0x7b, 0xf4, 0x28, 0xc9, 0x1f, 0x11, 0x37,
	0x16, 0x8b, 0xd0, 0xcb, 0x32, 0xc3, 0xce, 0xf3, 0xbe, 0xf0, 0x88, 0xf3, 0x2a, 0xce, 0x0c, 0x63,
	0x01, 0x13, 0x9d, 0x99, 0x9e, 0x06, 0xb0, 0xa5, 0xe1, 0x98, 0x97, 0x39, 0x52, 0xfb, 0x46, 0x79,
	0x61, 0xd9, 0x06, 0x67, 0x9a, 0xb8, 0xb0, 0x43, 0xd0, 0x66, 0xa1, 0x29, 0xaa, 0xa2, 0x3f, 0x68,
	0xf8, 0x0b, 0x45, 0x8b, 0x9b, 0xf0, 0x56, 0x9c, 0x28, 0x4c, 0x33, 0x62, 0x2c, 0x1e, 0x93, 0x41,
	0xbf, 0xfd, 0x78, 0xd2, 0x30, 0x45, 0x7e, 0xd0, 0xac, 0x83, 0x40, 0x74, 0x48, 0xcf, 0xb8, 0xeb,
	0x9f, 0xfa, 0x97, 0xfb, 0xca, 0xcd, 0xe1, 0x95, 0x38, 0x52, 0xa5, 0x79, 0xae, 0x36, 0xce, 0xba,
	0x62, 0x97, 0xab, 0x64, 0xc9, 0x48, 0xee, 0xf2, 0x40, 0xad, 0xd7, 0x70, 0x20, 0x2e, 0xb6, 0x15,
	0xf4, 0x61, 0x6a, 0xec, 0xdb, 0x0c, 0xc7, 0x29, 0xce, 0xd1, 0xf0, 0x4f, 0x08, 0x95, 0x00, 0x48,
	0x6d, 0xc8, 0x9e, 0x5a, 0xaf, 0xe1, 0xb5, 0x38, 0xde, 0x68, 0xfc, 0xcf, 0x05, 0xa2, 0x03, 0x76,
	0x8c, 0x0e, 0x3a, 0x54, 0x6e, 0x4e, 0x5e, 0x3e, 0x6a, 0xe9, 0xaf, 0x6a, 0xe9, 0x7f, 0xd5, 0xd2,
	0x7f, 0x6f, 0xa4, 0xb7, 0x6a, 0xa4, 0xf7, 0xd9, 0x48, 0xef, 0xf5, 0x3e, 0xcd, 0x78, 0x52, 0x8e,
	0x22, 0xb0, 0xf3, 0xd8, 0xe9, 0xd0, 0x39, 0x65, 0x14, 0x3b, 0x5b, 0xbd, 0xd6, 0x56, 0xbc, 0x5d,
	0xf1, 0x68, 0xc7, 0xd9, 0xbd, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x57, 0x6f, 0x5b, 0xb0, 0x87,
	0x01, 0x00, 0x00,
}

func (m *RegisterIBCAccountPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterIBCAccountPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterIBCAccountPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTxPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTxPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTxPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterIBCAccountPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterIBCAccountPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterIBCAccountPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunTxPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTxPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTxPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterIBCAccountPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RunTxPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RegisterIBCAccountPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *RunTxPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTypes(uint64(m.Code))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterIBCAccountPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterIBCAccountPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterIBCAccountPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTxPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTxPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTxPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytes == nil {
				m.TxBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterIBCAccountPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterIBCAccountPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterIBCAccountPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTxPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTxPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTxPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
